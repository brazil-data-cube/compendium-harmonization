#
# This file is part of compendium-harmonization
# Copyright (C) 2021-2022 INPE.
#
# compendium-harmonization is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.
#

import json
import os
from typing import Dict

import pandas as pd


def pair_metric_to_tidydata(pair_metric_data: Dict, data_type: str) -> pd.DataFrame:
    """Create a Tidy DataFrame from Pair Metrics Dictionary.

    Args:
        pair_metric_data (Dict): Dictionary with the pair metrics data. The dictionary should have the
        following structure:

            {
                PAIR_NAME: {
                    BAND_NAME: {
                        METRIC_1: METRIC_1_VALUE,
                        ...
                    }
                    ...
                }
                ...
            }

            For example:

                "S2B_MSIL1C_20171119T133209_N0206_R081_T22JBM_20171120T175608.SAFE_x_S2B_MSIL1C_20171122T134159_N0206_R124_T22JBM_20171122T200800.SAFE":{
                    "B02":{
                        "abs_dif_mean":92.90098392734075,
                        "rel_abs_perc_mean":19.60120010569088
                     },
                    ...
                    }
                }

        data_type (str): Name of metric data. It is used to identify the type of data used in the comparison,
        when generating the metrics.

    Returns:
        pd.DataFrame: Metrics data in a tidy format.

    Note:
        The validation `research_processing.validation.validation_routines` generate dictionaries in the required structure for
        the `pair_metric_data` parameter.

    See:
        For more information about the `Tidy Format`, please, refer to:
        Wickham, H. (2014). Tidy Data. Journal of Statistical Software, 59(10). https://doi.org/10.18637/jss.v059.i10
    """

    tidy_data_schema = {
        "pair": [],
        "band": [],
        "abs_dif_mean": [],
        "rel_abs_perc_mean": [],
        "datatype": []
    }

    for pair in pair_metric_data.keys():
        for band in pair_metric_data[pair].keys():

            tidy_data_schema["pair"].append(pair)
            tidy_data_schema["band"].append(band)
            tidy_data_schema["datatype"].append(data_type)

            for metric in pair_metric_data[pair][band].keys():
                tidy_data_schema[metric].append(
                    pair_metric_data[pair][band][metric])
    return pd.DataFrame(tidy_data_schema)


def map_validation_folder_as_tidydata(validation_folder: str) -> pd.DataFrame:
    """Map the results generated by the research-processing package to a Tidy-formatted dataframe.

    Args:
        validation_folder (str): Base Directory where the research-processing results are saved. This directory must contain the
        following structure:

            `validation_folder` (base)
                - VALIDATION_1
                - VALIDATION_2
                ...

            for example:

            my/metrics/results/path
                - validation_nbar_l8
                - validation_sr_l8
    Returns:
        pd.DataFrame: All Metrics data in a tidy format.
    """

    validations_directories = [
        os.path.join(validation_folder, f) for f in os.listdir(validation_folder)]

    tidy_dataframes = []
    for validation_directory in validations_directories:
        if not os.path.isdir(validation_directory):
            continue

        # finding the JSON metrics file
        # (Is assumed that the directories has one JSON file per validation
        # results directory)
        pair_metric_file = os.path.join(validation_directory,
                                        os.listdir(validation_directory)[0])

        with open(pair_metric_file, "r") as pair_metric_stream:
            _tidy_frame = pair_metric_to_tidydata(json.load(pair_metric_stream),
                                                  os.path.basename(validation_directory))

            tidy_dataframes.append(_tidy_frame)
    return pd.concat(tidy_dataframes, ignore_index=True)
